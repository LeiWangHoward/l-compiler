(
    (
        (esp -= 8)
        (eax <- (allocate 11 1))
        ((mem esp 4) <- eax)

        ((mem eax 4) <- 9)
        ((mem eax 8) <- 21)
        ((mem eax 12) <- 11)
        ((mem eax 16) <- 19)
        ((mem eax 20) <- 31)
        ; array = {4, 10, 5, 9, 15}

        (call :even)


        (eax <- (allocate 11 1))
        ((mem esp 0) <- eax)

        ((mem eax 4) <- 7)
        ((mem eax 8) <- 21)
        ((mem eax 12) <- 13)
        ((mem eax 16) <- 17)
        ((mem eax 20) <- 23)
        ; array = {3, 10, 6, 8, 11}

        (call :even)

        (eax <- (mem esp 4))
        (eax <- (print eax))
        (eax <- (mem esp 0))
        (eax <- (print eax))

        (esp += 8)

    )
    ( :even
        (esp -= 4)
        ((mem esp 0) <- ebp)
        (ebp <- esp)
        (esp -= 8)
        ((mem ebp -4) <- esi)
        ((mem ebp -8) <- edi)

        (ecx <- (mem eax 0))
        (ecx *= 2)
        (ecx += 1)
        (ebx <- 3)
    :even_loop
        (eax += 4)
        (edx <- (mem eax 0))
        (edx &= 2)
        (edx += 1)
        (cjump edx = 3 :odd_num :even_num)
        :even_num
            ((mem eax 0) <- 3)
            (goto :loop_end)
        :odd_num
            ((mem eax 0) <- 1)
        :loop_end
        (ebx += 2)
        (cjump ebx <= ecx :even_loop :even_end)
    :even_end
        (esi <- (mem ebp -4))
        (edi <- (mem ebp -8))
        (esp <- ebp)
        (ebp <- (mem esp 0))
        (esp += 4)
        (return)
    )
)
