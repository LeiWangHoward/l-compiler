(
    (
        (arr_size <- 21)         ; array size
        (eax <- arr_size)
        (call :count_up_array)
        (arr_addr <- eax) ; address of just-initialized array
        (ebx <- eax)
        
        :loop
        (ebx += 4)
        (val <- (mem ebx 0))
        (val >>= 3)
        (val <<= 1)
        (val += 1)
        ((mem ebx 0) <- val)

        (arr_size -= 2)
        (cjump arr_size <= 1 :end :loop)

        :end
        (eax <- (print arr_addr))
    )
    (   :count_up_array
        (count_to <- eax)
        (eax <- (allocate count_to 1))
        (array_base <- eax)
        (i <- 1) ; this will be the counter; starts at 0

        (dest <- array_base)
        :count_up_loop
        ((mem dest 4) <- i)
        (dest += 4)
        (i += 2) ; add an encoded 1

        (cjump i < count_to :count_up_loop :count_up_end)

        :count_up_end
        (eax <- array_base)
        (return)
    )
)
