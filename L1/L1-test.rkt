#lang plai
(require "L1.rkt")
(require "L1-type.rkt")
(module+ test
  ;;basic type check
  (test (L1_x? 'a) #f)
  (test (L1_x? 'esi) #t)
  (test (mem_op? '(mem eax 12)) #t)
  (test (mem_op? '(mem :dsds 10)) #f)
  (test (L1_t? '(2 3 4)) #f)
  (test (L1_t? 2) #t)
  (test (L1_t? 'eax) #t)
  (test (aop? (list '+= '-=)) #f)
  (test (aop? '+=) #t)
  (test (cmp? '<) #t)
  (test (L1_sx? 'ecx) #t)
  (test (L1_sx? 'cx) #f)
  (test (L1_u? ':me) #t)
  ;;name substitute
  (test (add-prefix 'eax) "%eax")
  (test (add-prefix 4) "$4")
  (test (add-prefix ':me) "$:me")
  (test (aop-name '+=) "addl")
  (test (aop-name '&=) "andl")
  (test (sop-name '<<=) "sall")
  (test (sop-name '>>=) "sarl")
  (test (jmp-name '<) "jl")
  (test (rev-jmp-name '<=) "jge")
  (test (eval-compare 12 '<= 13) #t)
  (test (eval-compare 10 '< 9) #f)
  ;;test i compiler
  (test (compile-i (L1_label ':what)) "_what")
  (test (compile-i (L1_return)) "movl %ebp, %esp\npopl %ebp\nret")
  (test (compile-i (L1_aop 'ecx '+= 11)) "addl $11, %ecx")
  (test (compile-i (L1_sop 'ebx '<<= 'ecx)) "sall %cl, %ebx")
  (test (compile-i (L1_assign 'ebx '3)) "movl $3, %ebx")
  (test (compile-i (L1_sop2 'ebx '>>= 1)) "sarl $1, %ebx")
  (test (compile-i (L1_goto ':myhome)) "jmp _myhome")
  (test (compile-i (L1_cjmp 12 '<= 13 ':true ':false)) "jmp _true")
  (test (compile-i (L1_cjmp 11 '< 10 ':true ':false)) "jmp _false")
  (test (compile-i (L1_cjmp 11 '< 'eax ':true ':false)) "cmpl $11, %eax\njg _true\njmp _false")
  (test (compile-i (L1_cmp 'eax 11 '< 12)) "movl $1, %eax")
  (test (compile-i (L1_cmp 'eax 11 '< 'ebx)) "cmpl $11, %ebx\nsetg %al\nmovzbl %al %eax")
  (test (compile-i (L1_cmp 'eax 'ecx '< 'ebx)) "cmpl %ebx, %ecx\nsetl %al\nmovzbl %al %eax")
  (test (compile-i (L1_call ':me)) "pushl $new_lab_me\npushl %ebp\nmovl %esp, %ebp\njmp _me\nnew_lab_me:")
  (test (compile-i (L1_call 'eax)) "pushl $new_lab_ax\npushl %ebp\nmovl %esp, %ebp\njmp *%eax\nnew_lab_ax:")
  (test (compile-i (L1_tcall 'eax)) "movl %ebp, %esp\njmp *%eax")
  (test (compile-i (L1_print 3)) "pushl $3\ncall print\naddl $4, %esp")
  (test (compile-i (L1_alloc 3 'eax)) "pushl %eax\npushl $3\ncall allocate\naddl $8, %esp")
  (test (compile-i (L1_aerr 3 3)) "pushl $3\npushl $3\ncall print_error\naddl $8, %esp")
  (test (compile-i (L1_rmem 'eax '(mem ecx 0))) "movl 0(%ecx), %eax")) 
